package mage

import (
	"fmt"
	"github.com/magefile/mage/mg"
	"github.com/magefile/mage/sh"
	"os"
	"path/filepath"
)

const (
	ProtoDir = "proto/smoxy"
	//ProtoTypesDir  = ProtoDir + "/types"
	//ProtoTypesFile = ProtoDir + "/types.proto"
)

type Proto mg.Namespace

func (Proto) Gen() error {
	fmt.Println("generating code from protobuf files")

	protoFiles, err := gatherProtoFiles(ProtoDir)

	if err != nil {
		return err
	}

	args := append([]string{
		"--go_out=./pkg",
		"--go_opt=paths=source_relative",
		"--go-grpc_out=require_unimplemented_servers=false:./pkg",
		"--go-grpc_opt=paths=source_relative",
		"--proto_path=${PWD}",
	}, protoFiles...)

	out, err := sh.OutCmd("protoc", args...)()

	fmt.Println(out)

	return err
}

func (p Proto) Generate() error {
	return p.Gen()
}

//func (Proto) GenTypes() error {
//	fmt.Printf("generating '%s' from '%s/*.proto'\n", ProtoTypesFile, ProtoTypesDir)
//
//	gqlFiles, err := filepath.Glob(ProtoTypesDir + "/*.proto")
//
//	if err != nil {
//		fmt.Println(gqlFiles)
//		return err
//	}
//
//	catOut, catErr := sh.OutCmd("cat", gqlFiles...)()
//
//	if catErr != nil {
//		fmt.Println(catOut)
//		return catErr
//	}
//
//	fmt.Println(fmt.Sprintf("writing generated protobuf types to: %s", ProtoTypesFile))
//
//	return os.WriteFile(ProtoTypesFile, []byte("// this file is generated by 'mage proto:genTypes'\n// DO NOT EDIT\n\n"+catOut), 0644)
//}
//
//func (p Proto) GenerateTypes() error {
//	return p.GenTypes()
//}

func gatherProtoFiles(dir string) ([]string, error) {
	protoFiles, pErr := filepath.Glob(dir + "/*.proto")

	if pErr != nil {
		return nil, pErr
	}

	// check for sub directories
	protoDirFiles, pdfErr := os.ReadDir(dir)

	if pdfErr != nil {
		return nil, pdfErr
	}

	for _, f := range protoDirFiles {
		info, iErr := f.Info()

		if iErr != nil {
			return nil, iErr
		}

		if !info.IsDir() {
			// only interested in directories
			continue
		}

		subDir := filepath.Join(dir, f.Name())

		subPf, spfErr := gatherProtoFiles(subDir)

		if spfErr != nil {
			return nil, spfErr
		}

		protoFiles = append(protoFiles, subPf...)
	}

	return protoFiles, nil
}
